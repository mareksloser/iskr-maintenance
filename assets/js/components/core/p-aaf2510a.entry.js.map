{"version":3,"names":["TagClass","root","govTagCss","GovTag","constructor","hostRef","ButtonSizes","_S","ButtonVariants","PRIMARY","this","h","govHost","host","validateVariant","newValue","validateProp","validateSize","componentWillLoad","variant","size","render","iconLeft","prepareIconFormat","iconRight","Host","class","classes","type","inverse","undefined","hasSlot","name"],"sources":["../../../packages/core/src/components/gov-tag/constants.ts","../../../packages/core/src/components/gov-tag/gov-tag.scss?tag=gov-tag","../../../packages/core/src/components/gov-tag/gov-tag.tsx"],"sourcesContent":["export const TagClass = {\n\troot: 'gov-tag',\n}\n","/*\n *   Tag\n */\n\n// Shared definitions - button & chip & tag\n@import \"../gov-button/button/gov-button-core\";\n\n.gov-tag {\n\t@extend %button-core;\n\n\t// VARIANTS\n\t@each $variant, $types in $tag-variants {\n\t\t@each $type, $definitions in $types {\n\t\t\t&[type=\"#{$type}\"][variant=\"#{$variant}\"] {\n\t\t\t\t.element {\n\t\t\t\t\tbackground-color: deep-map-get($tag-variants, $variant, $type, \"bg\");\n\t\t\t\t\tcolor: deep-map-get($tag-variants, $variant, $type, \"color\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@each $size, $definitions in $button-sizes {\n\t\t&[size=\"#{$size}\"] {\n\t\t\t.element {\n\t\t\t\tborder-radius: $tag-radius;\n\t\t\t\tcolumn-gap: $tag-gap;\n\t\t\t}\n\t\t}\n\t}\n\t@each $variant, $types in $chip-inverse-variants {\n\t\t&[variant=\"#{$variant}\"] {\n\t\t\t@include parameter(\"inverse\") {\n\t\t\t\t.element,\n\t\t\t\t.element .element {\n\t\t\t\t\tborder-width: rem-calc(1);\n\t\t\t\t\tborder-color: deep-map-get($chip-inverse-variants, $variant, \"border-color\");\n\t\t\t\t\tbackground-color: deep-map-get($chip-inverse-variants, $variant, \"bg\");\n\t\t\t\t\tcolor: deep-map-get($chip-inverse-variants, $variant, \"color\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {Component, Element, h, Host, Prop, Watch} from '@stencil/core'\nimport {govHost} from '../../helpers/Dom/template'\nimport {GovHost} from '../../helpers/Dom/template.types'\nimport {validateProp} from '../../helpers/Validate/props'\nimport {ButtonSizes, ButtonSizesType, ButtonVariants, ButtonVariantType} from '../gov-button/button/constants'\nimport {TagClass} from './constants'\nimport {prepareIconFormat} from \"../gov-icon/helpers\";\n\n@Component({\n\ttag: 'gov-tag',\n\tstyleUrl: 'gov-tag.scss',\n})\nexport class GovTag {\n\tprivate h: GovHost\n\n\tconstructor() {\n\t\tthis.h = govHost(this.host)\n\t}\n\n\t@Element() host: HTMLGovTagElement\n\n\t/**\n\t * Determine if component should have inverse colors to be used on dark background\n\t */\n\t@Prop() readonly inverse: boolean = false\n\t/**\n\t * Definition of the button icon on the left. The icon must be defined in the form \"type/name\".\n\t */\n\t@Prop({attribute: \"icon-left\"}) readonly iconLeft?: string\n\t/**\n\t * Definition of the button icon on the left. The icon must be defined in the form \"type/name\".\n\t */\n\t@Prop({attribute: \"icon-right\"}) readonly iconRight?: string\n\t/**\n\t * Tagâ€™s size.\n\t */\n\t@Prop({reflect: true}) readonly size: ButtonSizesType = ButtonSizes._S\n\t/**\n\t * Style variation of the tag.\n\t */\n\t@Prop({reflect: true}) readonly variant: ButtonVariantType = ButtonVariants.PRIMARY\n\n\t@Watch('variant')\n\tvalidateVariant(newValue: string): void {\n\t\tvalidateProp(ButtonVariants, newValue, TagClass.root)\n\t}\n\n\t@Watch('size')\n\tvalidateSize(newValue: string): void {\n\t\tvalidateProp(ButtonSizes, newValue, TagClass.root)\n\t}\n\n\tcomponentWillLoad(): void {\n\t\tthis.validateVariant(this.variant)\n\t\tthis.validateSize(this.size)\n\t}\n\n\trender() {\n\t\tconst iconLeft = prepareIconFormat(this.iconLeft)\n\t\tconst iconRight = prepareIconFormat(this.iconRight)\n\t\treturn (\n\t\t\t<Host class={this.h.classes(TagClass.root)}\n\t\t\t\t\t\tvariant={this.variant}\n\t\t\t\t\t\ttype={this.inverse ? undefined : 'solid'}\n\t\t\t\t\t\tsize={this.size} inverse={this.inverse}>\n\t\t\t\t<span class=\"element\">\n\t\t\t\t\t{this.h.hasSlot('left-icon') && <slot name=\"left-icon\"></slot>}\n\t\t\t\t\t{iconLeft && \t<gov-icon type={iconLeft.type} name={iconLeft.name}></gov-icon>}\n\t\t\t\t\t<slot/>\n\t\t\t\t\t{iconRight && \t<gov-icon type={iconRight.type} name={iconRight.name}></gov-icon>}\n\t\t\t\t\t{this.h.hasSlot('right-icon') && <slot name=\"right-icon\"></slot>}\n\t\t\t\t</span>\n\t\t\t</Host>\n\t\t)\n\t}\n}\n"],"mappings":"wUAAO,MAAMA,EAAW,CACvBC,KAAM,WCDP,MAAMC,EAAY,m/vE,MCYLC,EAAM,MAGlB,WAAAC,CAAAC,G,uBASoC,M,2DAYoBC,EAAYC,G,aAIPC,EAAeC,QAxB3EC,KAAKC,EAAIC,EAAQF,KAAKG,K,CA2BvB,eAAAC,CAAgBC,GACfC,EAAaR,EAAgBO,EAAUf,EAASC,K,CAIjD,YAAAgB,CAAaF,GACZC,EAAaV,EAAaS,EAAUf,EAASC,K,CAG9C,iBAAAiB,GACCR,KAAKI,gBAAgBJ,KAAKS,SAC1BT,KAAKO,aAAaP,KAAKU,K,CAGxB,MAAAC,GACC,MAAMC,EAAWC,EAAkBb,KAAKY,UACxC,MAAME,EAAYD,EAAkBb,KAAKc,WACzC,OACCb,EAACc,EAAI,CAACC,MAAOhB,KAAKC,EAAEgB,QAAQ3B,EAASC,MAClCkB,QAAST,KAAKS,QACdS,KAAMlB,KAAKmB,QAAUC,UAAY,QACjCV,KAAMV,KAAKU,KAAMS,QAASnB,KAAKmB,SACjClB,EAAA,QAAMe,MAAM,WACVhB,KAAKC,EAAEoB,QAAQ,cAAgBpB,EAAA,QAAMqB,KAAK,cAC1CV,GAAaX,EAAA,YAAUiB,KAAMN,EAASM,KAAMI,KAAMV,EAASU,OAC5DrB,EAAA,aACCa,GAAcb,EAAA,YAAUiB,KAAMJ,EAAUI,KAAMI,KAAMR,EAAUQ,OAC9DtB,KAAKC,EAAEoB,QAAQ,eAAiBpB,EAAA,QAAMqB,KAAK,gB"}