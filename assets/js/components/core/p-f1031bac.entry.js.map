{"version":3,"names":["hasOwnProperty","obj","prop","Object","prototype","call","govFormMultiSelectCss","GovFormMultiSelect","constructor","hostRef","this","selectId","createID","listId","h","govHost","host","f","govForm","validateVariant","newValue","validateProp","FormMultiselectVariants","FormMultiSelectClass","root","validateSize","FormMultiselectSizes","watchDisabled","passControlAttrs","passAttrToControl","size","toBoolAttr","invalid","success","componentWillLoad","variant","getAvailableOptions","ignoreFilter","Array","isArray","options","length","filter","option","isSelected","selectedOptions","findIndex","selected","value","disabled","from","selectRef","querySelectorAll","map","name","textContent","initAutocomplete","autocompleteRef","addEventListener","onSelectHandler","bind","onInputHandler","onFocusHandler","onBlurHandler","setSearchCallback","Promise","resolve","data","String","removeDiacritics","toLowerCase","indexOf","then","getOptionIndex","getOptionElement","querySelector","selectOption","newOption","notify","index","govChange","emit","component","govSelect","removeOption","splice","govRemove","componentDidLoad","forEach","canValidateWcagOnRender","delay","validateWcag","render","Host","class","wrap","identifier","required","placeholder","messageEmpty","messageLoading","ref","el","minlength","wcagDescribedBy","wcagLabelledBy","wcagOwns","slot","hasSlot","hidden","multiple","toBoolAttrIfDefined","hideSelectedList","role","id","list","item","wcagLabel","type","onTagRemove","e","stopPropagation","focused","govFocus","originalEvent","govBlur","detail","clearValue","focus","setFocus","setValue","getRef","getSelectedOptions","setOptions","getOptions","setSelectedOptions","removeSelectedOption","setSelectedOption","validateWcagRef","validateWcagLabelFor"],"sources":["../../../packages/core/src/utils/helpers.types.ts","../../../packages/core/src/components/gov-form/multiselect/gov-form-multi-select.scss?tag=gov-form-multi-select","../../../packages/core/src/components/gov-form/multiselect/gov-form-multi-select.tsx"],"sourcesContent":["\nexport type Optional<T> = T | undefined;\nexport type Nullable<T> = T | null;\nexport type OptionalProperty<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\nexport type ValueOf<T> = T[keyof T];\n\nexport type DeepPartial<T> = {\n\t[P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type ObjectOrArrayType<T> = T | T[];\nexport const ObjectOrArray = {\n\tfirst: <T>(item: ObjectOrArrayType<T>): T => (Array.isArray(item) ? item[0] : item),\n\tarray: <T>(item: ObjectOrArrayType<T>): T[] => (Array.isArray(item) ? item : [item]),\n};\n\nexport const Omit = <T extends object, P extends keyof T, R extends Omit<T, P>>(properties: P[], object: T): R =>\n\tObject.entries(object).reduce(\n\t\t(all, [key, value]) => (properties.includes(key as P) ? all : { ...all, [key]: value }),\n\t\t{} as R\n\t);\n\nexport const whenDefined =\n\t<I, O>(fn: (input: I) => O) =>\n\t(value?: I): O | undefined =>\n\t\tvalue ? fn(value) : undefined;\n\n/**\n * Comparator function which defines the sort order\n * @example\n * ```\n * // sorts objects by `id` property\n * [{ id: 3 }, { id: 2 }, { id: 1 }].sort(compare(['id']))\n *\n * // sorts objects by `id` and `name` properties\n * [{ id: 3, name: 'b' }, { id: 2, name: 'a' }, { id: 1, name: 'b' }].sort(compare(['id', 'name']))\n * ```\n *\n * @param {Array<keyof T>} properties\n * @return {number}\n */\nexport const compare =\n\t<T extends object>(properties: Array<keyof T>) =>\n\t(a: T, b: T): number => {\n\t\tconst [property, ...rest] = properties;\n\t\tif (!property) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (a[property] < b[property]) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a[property] > b[property]) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn rest.length > 0 ? compare(rest)(a, b) : 0;\n\t};\n\nexport const is = <T>(value: T | undefined | null): value is T => value !== undefined && value !== null;\n\nexport const has =\n\t<T extends object, P extends keyof T>(property: P) =>\n\t(object: OptionalProperty<T, P>): object is T => {\n\t\treturn !!object[property];\n\t};\n\nexport const equals =\n\t<A>(a?: A) =>\n\t(b?: A): boolean =>\n\t\ta === b;\nexport const prop =\n\t<T, P extends keyof T>(property: P) =>\n\t(object: T): T[P] =>\n\t\tobject[property];\n\nexport const propOptional =\n\t<T, P extends keyof T>(property: P) =>\n\t(object?: T): Optional<T[P]> =>\n\t\tobject ? object[property] : undefined;\n\nexport const hasOwnProperty = <X extends object, Y extends PropertyKey>(\n\tobj: X,\n\tprop: Y\n): obj is X & Record<Y, ValueOf<X>> => {\n\treturn Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\nexport const isObject = <T extends object>(obj: unknown): obj is T => typeof obj === 'object';\nexport const isString = (input: unknown): input is string => is(input) && typeof input === 'string';\nexport const isNumber = (input: unknown): input is string => is(input) && typeof input === 'number';\n\ntype Entries<T> = {\n\t[K in keyof T]: [K, T[K]];\n}[keyof T][];\nexport const getEntries = <T extends object>(obj: T) => Object.entries(obj) as Entries<T>;\n\nexport const getKeys = <T extends object>(obj: T) => Object.keys(obj) as Array<keyof T>;\nexport const getValues = <T extends object>(obj: T) => Object.values(obj) as Array<ValueOf<T>>;\n\nexport const first = <T>(array: T[]): Optional<T> => array[0];\n\nexport const pairs = <T>(arr: T[]): Array<[string, string]> =>\n\tarr.flatMap((item1, index1) => arr.flatMap((item2, index2) => (index1 > index2 ? [[item1, item2]] : []))) as any;\n\nexport const find =\n\t<T, S extends T>(predicate: (item: T) => item is S) =>\n\t(array?: T[]): Optional<S> =>\n\t\t(array || []).find(predicate);\nexport const filter =\n\t<T, S extends T>(predicate: (item: T) => item is S) =>\n\t(array?: T[]): S[] =>\n\t\t(array || []).filter(predicate);\n","/*\n *   Multiselect\n */\n\n@import \"../select/gov-form-select-core.scss\";\n$class: \".gov-form-multi-select\";\n\n#{$class} {\n\t@extend %form-select-core;\n\tflex-wrap: wrap;\n\t&__wrap {\n\t\tdisplay: flex;\n\t\tgap: rem-calc(8);\n\t\twidth: 100%;\n\t}\n\t&__list {\n\t\t@extend %reset-ul;\n\t\t@include typography($font-size-xs);\n\t\tdisplay: flex;\n\t\tgap: rem-calc(8);\n\t\tflex-wrap: wrap;\n\t}\n\t&__list > &__item {\n\t\t@extend %reset-ul-li;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\tflex: 0 0 auto;\n\t\talign-items: center;\n\t\tpadding: rem-calc(0 0 0 8);\n\t\tbackground: $form-multiselect-bg;\n\t\ttransition: $t linear background-color;\n\t}\n}\n","import {Component, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch} from '@stencil/core'\nimport {govForm} from '../../../helpers/Dom/form'\nimport {GovForm} from '../../../helpers/Dom/form.types'\nimport {govHost, toBoolAttr, toBoolAttrIfDefined} from '../../../helpers/Dom/template'\nimport {GovHost} from '../../../helpers/Dom/template.types'\nimport {canValidateWcagOnRender} from '../../../helpers/Dom/win'\nimport {validateProp} from '../../../helpers/Validate/props'\nimport {validateWcagLabelFor, validateWcagRef} from '../../../helpers/Validate/wcag'\nimport {Nullable} from '../../../types/interfaces'\nimport {createID, removeDiacritics} from '../../../utils/string.utils'\nimport {delay} from '../../../utils/utils'\nimport {FormAutocompleteEvent} from '../autocomplete/gov-form-autocomplete.types'\nimport {\n\tFormMultiSelectClass,\n\tFormMultiselectSizes,\n\tFormMultiselectSizesType,\n\tFormMultiselectVariants,\n\tFormMultiselectVariantType\n} from './constants'\nimport {FormMultiselectEvent, GovFormMultiSelectItem} from './gov-form-multi-select.types'\nimport {hasOwnProperty} from \"../../../utils/helpers.types\";\n\n@Component({\n\ttag: 'gov-form-multi-select',\n\tstyleUrl: 'gov-form-multi-select.scss',\n})\nexport class GovFormMultiSelect {\n\tprivate f: GovForm\n\tprivate readonly h: GovHost\n\n\tprivate selectRef?: HTMLSelectElement\n\tprivate autocompleteRef?: HTMLGovFormAutocompleteElement\n\n\tprivate readonly selectId: string\n\tprivate readonly listId: string\n\n\tconstructor() {\n\t\tthis.selectId = createID('GovSelect')\n\t\tthis.listId = createID('GovMultiList')\n\n\t\tthis.h = govHost(this.host)\n\t\tthis.f = govForm(this.h)\n\t}\n\n\t@Element() host: HTMLGovFormSelectElement\n\t/**\n\t * Custom select identifier.\n\t */\n\t@Prop({attribute: 'identifier'}) readonly identifier: string\n\t/**\n\t * Custom select placeholder.\n\t */\n\t@Prop({attribute: 'placeholder'}) readonly placeholder: string\n\t/**\n\t * Style variation of the form select.\n\t */\n\t@Prop() readonly variant?: FormMultiselectVariantType\n\t/**\n\t * Select’s size.\n\t */\n\t@Prop() readonly size?: FormMultiselectSizesType = 'm'\n\t/**\n\t * Name of the select.\n\t */\n\t@Prop() readonly name: string\n\t/**\n\t * Option to hide the list of selected items\n\t */\n\t@Prop({attribute: 'hide-selected-list'}) readonly hideSelectedList: boolean = false\n\t/**\n\t * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them.\n\t * When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.\n\t */\n\t@Prop() readonly required: boolean = false\n\t/**\n\t * Makes the select component disabled.\n\t * This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.\n\t */\n\t@Prop() readonly disabled: boolean = false\n\t/**\n\t * Indicates the entered value does not conform to the format expected by the application.\n\t */\n\t@Prop() readonly invalid: boolean\n\t/**\n\t * Indicates the entered value of child form element does conform to the format expected by the application.\n\t */\n\t@Prop() readonly success: boolean\n\t/**\n\t * Custom message for when there is a blank sheet\n\t */\n\t@Prop({attribute: 'message-empty'}) readonly messageEmpty: string = 'Nebyly nalezeny žádné výsledky'\n\t/**\n\t * Custom message for when data is loaded\n\t */\n\t@Prop({attribute: 'message-loading'}) readonly messageLoading: string = 'Načítám...'\n\t/**\n\t * Indicates the id of a component that describes the input.\n\t */\n\t@Prop({attribute: 'wcag-described-by'}) readonly wcagDescribedBy: string\n\t/**\n\t * Indicates the id of a component that labels the input.\n\t */\n\t@Prop({attribute: 'wcag-labelled-by'}) readonly wcagLabelledBy: string\n\t/**\n\t * Indicates the id of a component that describes the input.\n\t */\n\t@Prop({attribute: 'wcag-owns'}) readonly wcagOwns: string\n\t/**\n\t * Emitted when the select has focus.\n\t */\n\t@Event({eventName: 'gov-focus'}) govFocus: EventEmitter<FormMultiselectEvent>\n\t/**\n\t * Emitted when the select loses focus.\n\t */\n\t@Event({eventName: 'gov-blur'}) govBlur: EventEmitter<FormMultiselectEvent>\n\t/**\n\t * Emitted when the select change value.\n\t */\n\t@Event({eventName: 'gov-change'}) govChange: EventEmitter<FormMultiselectEvent>\n\t/**\n\t * Emitted when an item is selected\n\t */\n\t@Event({eventName: 'gov-select'}) govSelect: EventEmitter<FormMultiselectEvent>\n\t/**\n\t * Emitted when an item is removed\n\t */\n\t@Event({eventName: 'gov-remove'}) govRemove: EventEmitter<FormMultiselectEvent>\n\n\t@State() focused: boolean\n\t@State() value: string\n\t@State() selectedOptions: GovFormMultiSelectItem[] = []\n\t@State() options: GovFormMultiSelectItem[] = []\n\n\t@Watch('variant')\n\tvalidateVariant(newValue: string): void {\n\t\tvalidateProp(FormMultiselectVariants, newValue, FormMultiSelectClass.root)\n\t}\n\n\t@Watch('size')\n\tvalidateSize(newValue: string): void {\n\t\tvalidateProp(FormMultiselectSizes, newValue, FormMultiSelectClass.root)\n\t}\n\n\t@Watch('disabled')\n\t@Watch('invalid')\n\t@Watch('success')\n\t@Watch('size')\n\twatchDisabled(): void {\n\t\tthis.passControlAttrs()\n\t}\n\n\tprivate passControlAttrs() {\n\t\tthis.f.passAttrToControl('size', this.size)\n\t\tthis.f.passAttrToControl('invalid', toBoolAttr(this.invalid))\n\t\tthis.f.passAttrToControl('success', toBoolAttr(this.success))\n\t}\n\n\tcomponentWillLoad() {\n\t\tthis.validateVariant(this.variant)\n\t\tthis.validateSize(this.size)\n\t\tthis.watchDisabled()\n\t}\n\n\tprivate getAvailableOptions(ignoreFilter = false): GovFormMultiSelectItem[] {\n\t\tif (Array.isArray(this.options) && this.options.length) {\n\t\t\tif (ignoreFilter) {\n\t\t\t\treturn this.options;\n\t\t\t}\n\t\t\treturn this.options.filter((option) => {\n\t\t\t\tconst isSelected = this.selectedOptions.findIndex((selected) => selected.value === option.value)\n\t\t\t\treturn (isSelected !== -1 || option?.disabled) ? false : true\n\t\t\t})\n\t\t}\n\t\treturn Array.from(this.selectRef.querySelectorAll('option'))\n\t\t\t.filter((option: HTMLOptionElement) => {\n\t\t\t\tif (ignoreFilter) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\treturn !(option.disabled || option.selected)\n\t\t\t})\n\t\t\t.map((option: HTMLOptionElement) => ({name: option.textContent, value: option.value}))\n\t}\n\n\tprivate initAutocomplete() {\n\t\tthis.autocompleteRef.addEventListener('gov-select', this.onSelectHandler.bind(this))\n\t\tthis.autocompleteRef.addEventListener('gov-input', this.onInputHandler.bind(this))\n\t\tthis.autocompleteRef.addEventListener('gov-focus', this.onFocusHandler.bind(this))\n\t\tthis.autocompleteRef.addEventListener('gov-blur', this.onBlurHandler.bind(this))\n\t\tthis.autocompleteRef\n\t\t\t.setSearchCallback(value => {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tconst data = this.getAvailableOptions()\n\t\t\t\t\tif (String(value).length === 0) {\n\t\t\t\t\t\treturn resolve(data)\n\t\t\t\t\t}\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tdata.filter(({name}) => {\n\t\t\t\t\t\t\tif (!name) return false\n\t\t\t\t\t\t\treturn removeDiacritics(name).toLowerCase().indexOf(removeDiacritics(value).toLowerCase()) > -1\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t})\n\t\t\t.then()\n\t}\n\n\tprivate getOptionIndex(value: GovFormMultiSelectItem): number {\n\t\treturn this.selectedOptions.findIndex(option => option.value === value.value && option.name === value.name)\n\t}\n\n\tprivate getOptionElement(value: GovFormMultiSelectItem): Nullable<HTMLOptionElement> {\n\t\treturn this.selectRef.querySelector('option[value=\"' + value.value + '\"]') as HTMLOptionElement\n\t}\n\n\tprivate selectOption(newOption: GovFormMultiSelectItem, notify = true) {\n\t\tconst index = this.getOptionIndex(newOption)\n\t\tif (index === -1) {\n\t\t\tthis.selectedOptions = [...this.selectedOptions, newOption]\n\t\t\tif (notify) {\n\t\t\t\tthis.govChange.emit({\n\t\t\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\t\t\tvalue: this.selectedOptions,\n\t\t\t\t})\n\t\t\t\tthis.govSelect.emit({\n\t\t\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\t\t\tvalue: this.selectedOptions,\n\t\t\t\t})\n\t\t\t}\n\t\t\tconst option = this.getOptionElement(newOption)\n\t\t\tif (option) {\n\t\t\t\toption.selected = true\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeOption(removeOption: GovFormMultiSelectItem, notify = true) {\n\t\tconst index = this.getOptionIndex(removeOption)\n\t\tif (index !== -1) {\n\t\t\tthis.selectedOptions.splice(index, 1)\n\t\t\tthis.selectedOptions = [...this.selectedOptions]\n\t\t\tif (notify) {\n\t\t\t\tthis.govChange.emit({\n\t\t\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\t\t\tvalue: this.selectedOptions,\n\t\t\t\t})\n\t\t\t\tthis.govRemove.emit({\n\t\t\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\t\t\tvalue: this.selectedOptions,\n\t\t\t\t})\n\t\t\t}\n\t\t\tconst option = this.getOptionElement(removeOption)\n\t\t\tif (option) {\n\t\t\t\toption.selected = false\n\t\t\t}\n\t\t}\n\t}\n\n\tasync componentDidLoad() {\n\t\tthis.initAutocomplete()\n\n\t\tthis.selectRef.querySelectorAll('option').forEach((option: HTMLOptionElement) => {\n\t\t\tif (option.selected) {\n\t\t\t\tthis.selectOption({\n\t\t\t\t\tname: option.textContent,\n\t\t\t\t\tvalue: option.value,\n\t\t\t\t}, false)\n\t\t\t}\n\t\t})\n\n\t\tif (canValidateWcagOnRender()) {\n\t\t\tawait delay(500)\n\t\t\tawait this.validateWcag()\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Host class={FormMultiSelectClass.root} size={this.size} variant={this.variant}>\n\t\t\t\t<div class={FormMultiSelectClass.wrap}>\n\t\t\t\t\t<div class=\"element\">\n\t\t\t\t\t\t<gov-form-autocomplete\n\t\t\t\t\t\t\tvalue={this.value}\n\t\t\t\t\t\t\tdisabled={this.disabled}\n\t\t\t\t\t\t\tidentifier={this.identifier || this.selectId}\n\t\t\t\t\t\t\trequired={false}\n\t\t\t\t\t\t\tsize={this.size}\n\t\t\t\t\t\t\tvariant={this.variant}\n\t\t\t\t\t\t\tplaceholder={this.placeholder}\n\t\t\t\t\t\t\tmessage-empty={this.messageEmpty}\n\t\t\t\t\t\t\tmessage-loading={this.messageLoading}\n\t\t\t\t\t\t\tref={el => (this.autocompleteRef = el as HTMLGovFormAutocompleteElement)}\n\t\t\t\t\t\t\tminlength={0}\n\t\t\t\t\t\t\twcagDescribedBy={this.wcagDescribedBy}\n\t\t\t\t\t\t\twcagLabelledBy={this.wcagLabelledBy}\n\t\t\t\t\t\t\twcagOwns={this.listId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<gov-icon slot=\"right-icon\" class=\"icon-arrow\" name=\"chevron-down\"></gov-icon>\n\t\t\t\t\t\t{this.h.hasSlot('right-icon') && !(this.success || this.invalid) && <slot name=\"right-icon\"/>}\n\t\t\t\t\t\t{this.success && <gov-icon slot=\"right-icon\" class=\"icon-validation\" name=\"check-lg\"></gov-icon>}\n\t\t\t\t\t\t{this.invalid && <gov-icon slot=\"right-icon\" class=\"icon-validation\" name=\"exclamation-lg\"></gov-icon>}\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\thidden\n\t\t\t\t\t\t\taria-hidden={toBoolAttr(true)}\n\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\trequired={this.required}\n\t\t\t\t\t\t\tname={this.name}\n\t\t\t\t\t\t\tdisabled={this.disabled}\n\t\t\t\t\t\t\tref={el => (this.selectRef = el as HTMLSelectElement)}\n\t\t\t\t\t\t\taria-disabled={toBoolAttrIfDefined(this.disabled)}\n\t\t\t\t\t\t\taria-required={toBoolAttrIfDefined(this.required)}\n\t\t\t\t\t\t\taria-invalid={toBoolAttrIfDefined(this.invalid)}\n\t\t\t\t\t\t\taria-describedby={this.wcagDescribedBy}\n\t\t\t\t\t\t\taria-labelledby={this.wcagLabelledBy}\n\t\t\t\t\t\t\taria-owns={this.wcagOwns}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<slot></slot>\n\t\t\t\t\t\t\t{this.options.map((option) => {\n\t\t\t\t\t\t\t\treturn (<option value={option.value} selected={option.value === this.value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={option?.disabled}>{option.name}</option>)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.hideSelectedList === false ? (\n\t\t\t\t\t<ul role=\"listbox\" id={this.listId} class={FormMultiSelectClass.list}>\n\t\t\t\t\t\t{this.selectedOptions.map(option => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li class={FormMultiSelectClass.item} role=\"option\">\n\t\t\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t\t\t<gov-button\n\t\t\t\t\t\t\t\t\t\twcagLabel={'Odebrat vybranou položku ' + option.name}\n\t\t\t\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\t\t\t\ttype=\"base\"\n\t\t\t\t\t\t\t\t\t\tsize=\"s\"\n\t\t\t\t\t\t\t\t\t\ton-gov-click={() => this.onTagRemove(option)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<gov-icon name=\"x-lg\"></gov-icon>\n\t\t\t\t\t\t\t\t\t</gov-button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t) : null}\n\t\t\t</Host>\n\t\t)\n\t}\n\n\tprivate onFocusHandler(e: FocusEvent) {\n\t\te.stopPropagation()\n\t\tthis.focused = true\n\t\tthis.govFocus.emit({\n\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\toriginalEvent: e,\n\t\t\tvalue: this.selectedOptions,\n\t\t})\n\t}\n\n\tprivate onBlurHandler(e: FocusEvent) {\n\t\te.stopPropagation()\n\t\te.stopPropagation()\n\t\tthis.focused = false\n\t\tthis.govBlur.emit({\n\t\t\tcomponent: FormMultiSelectClass.root,\n\t\t\toriginalEvent: e,\n\t\t\tvalue: this.selectedOptions,\n\t\t})\n\t}\n\n\tprivate onInputHandler(e: CustomEvent<FormAutocompleteEvent>) {\n\t\tthis.value = e.detail.value\n\t\te.stopPropagation()\n\t}\n\n\tprivate onSelectHandler(e: CustomEvent<FormAutocompleteEvent>) {\n\t\te.stopPropagation()\n\t\tconst value = e.detail.selected\n\t\tthis.selectOption(value as GovFormMultiSelectItem)\n\t\tthis.value = ''\n\t\tthis.autocompleteRef.clearValue()\n\t\tthis.autocompleteRef.focus()\n\t}\n\n\tprivate onTagRemove(removeOption: GovFormMultiSelectItem) {\n\t\tthis.removeOption(removeOption)\n\t}\n\n\t/**\n\t * Returns the current state of the component\n\t */\n\t@Method()\n\tasync setFocus(options?: FocusOptions): Promise<void> {\n\t\treturn this.selectRef.focus(options)\n\t}\n\n\t/**\n\t * Sets the ordered value of the element\n\t */\n\t@Method()\n\tasync setValue(value: string): Promise<void> {\n\t\tthis.value = value\n\t}\n\n\t/**\n\t * Returns an instance of the native html select element\n\t */\n\t@Method()\n\tasync getRef(): Promise<HTMLSelectElement> {\n\t\treturn this.selectRef\n\t}\n\n\t/**\n\t * Returns a list of selected items\n\t */\n\t@Method()\n\tasync getSelectedOptions(): Promise<GovFormMultiSelectItem[]> {\n\t\treturn this.selectedOptions\n\t}\n\n\t/**\n\t * Setting a list of options to choose from\n\t */\n\t@Method()\n\tasync setOptions(options: GovFormMultiSelectItem[]): Promise<void> {\n\t\tif (Array.isArray(options)) {\n\t\t\tthis.options = [...options]\n\t\t}\n\t}\n\n\t/**\n\t * Returns all available options\n\t */\n\t@Method()\n\tasync getOptions(ignoreFilter = true): Promise<GovFormMultiSelectItem[]> {\n\t\treturn this.getAvailableOptions(ignoreFilter)\n\t}\n\n\t/**\n\t * Setting the list of selected options\n\t */\n\t@Method()\n\tasync setSelectedOptions(options: GovFormMultiSelectItem[]): Promise<void> {\n\t\tif (Array.isArray(options)) {\n\t\t\tthis.selectedOptions = [...options]\n\t\t}\n\t}\n\n\t/**\n\t * To remove an option from the selected list\n\t */\n\t@Method()\n\tasync removeSelectedOption(option: GovFormMultiSelectItem, notify = false): Promise<void> {\n\t\tif (typeof option === 'object' && hasOwnProperty(option, 'name') && hasOwnProperty(option, 'value')) {\n\t\t\tthis.removeOption(option, notify)\n\t\t}\n\t}\n\n\t/**\n\t * Returns an instance of the native html select element\n\t */\n\t@Method()\n\tasync setSelectedOption(option: GovFormMultiSelectItem, notify = false): Promise<void> {\n\t\tif (typeof option === 'object' && hasOwnProperty(option, 'name') && hasOwnProperty(option, 'value')) {\n\t\t\tthis.selectOption(option, notify)\n\t\t}\n\t}\n\n\t/**\n\t * Validate the WCAG attributes of the component\n\t */\n\t@Method()\n\tasync validateWcag(): Promise<void> {\n\t\tvalidateWcagRef(this.wcagDescribedBy, 'wcag-described-by', FormMultiSelectClass.root)\n\t\tvalidateWcagRef(this.wcagLabelledBy, 'wcag-labelled-by', FormMultiSelectClass.root)\n\t\tvalidateWcagRef(this.wcagOwns, 'wcag-owns', FormMultiSelectClass.root)\n\t\tvalidateWcagLabelFor(this.identifier || this.selectId, this.wcagLabelledBy, FormMultiSelectClass.root)\n\t}\n}\n"],"mappings":"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"}