{"version":3,"names":["govFormCheckboxCss","GovFormCheckbox","constructor","hostRef","this","checkboxId","createID","h","govHost","host","f","govForm","validateSize","newValue","validateProp","FormCheckboxSizes","FormCheckboxClass","root","watchDisabled","passControlAttrs","passAttrToControl","size","toBoolAttr","invalid","componentWillLoad","componentDidRender","passAttrToLabel","identifier","String","required","canValidateWcagOnRender","delay","validateWcag","render","wrapCheckbox","children","noLabel","class","label","Host","checked","toBoolAttrIfDefined","Fragment","id","type","value","name","onClick","onClickHandler","bind","onChange","onChangeHandler","onFocus","onFocusHandler","onBlur","onBlurHandler","disabled","ref","el","inputRef","wcagDescribedBy","wcagLabelledBy","check","e","stopPropagation","govFocus","emit","component","originalEvent","govBlur","target","govChange","getRef","validateWcagRef","validateWcagLabelFor"],"sources":["../../../packages/core/src/components/gov-form/checkbox/gov-form-checkbox.scss?tag=gov-form-checkbox","../../../packages/core/src/components/gov-form/checkbox/gov-form-checkbox.tsx"],"sourcesContent":["/*\n *   Checkbox\n */\n\n@import \"../checkbox/gov-form-checkbox-core.scss\";\n\n$class: \".gov-form-checkbox\";\n\n#{$class} {\n    @extend %form-checkbox-core;\n\n    input + span {\n        &::before {\n            border-radius: $border-radius;\n        }\n    }\n\n    &__check {\n        position: absolute;\n        color: $form-checkbox-check-color;\n        opacity: 0;\n        transition: $t linear opacity;\n    }\n\n    &__label {\n        position: relative;\n    }\n\n    // STATES\n    input:checked + span::before {\n        background: $form-checkbox-indicator-bg;\n    }\n\n    input:checked + span &__check {\n        opacity: 1;\n    }\n\n    @include parameter(\"invalid\") {\n        input:checked + span::before {\n            background: $form-state-color-error;\n        }\n    }\n    @include parameter(\"disabled\") {\n        input:checked + span::before {\n            border-color: $form-state-bg-disabled;\n            background-color: $form-state-bg-disabled;\n        }\n    }\n\n    // VARIANTS\n    @each $size, $definitions in $form-checkbox-core-sizes {\n        &[size=\"#{$size}\"] {\n            #{$class} {\n                &__check {\n                    top: calc((get(\"indicator-size\", $definitions) - get(\"check-size\", $definitions)) / 2);\n                    left: calc((get(\"indicator-size\", $definitions) - get(\"check-size\", $definitions)) / 2);\n                    width: get(\"check-size\", $definitions);\n                    height: get(\"check-size\", $definitions);\n                }\n            }\n        }\n    }\n}\n","import { Component, Element, Event, EventEmitter, h, Host, Method, Prop, Watch } from \"@stencil/core\"\nimport { createID } from \"../../../utils/string.utils\"\nimport { validateProp } from \"../../../helpers/Validate/props\"\nimport { FormCheckboxClass, FormCheckboxSizes, FormCheckboxSizesType } from \"./constants\"\nimport { govHost, toBoolAttr, toBoolAttrIfDefined } from \"../../../helpers/Dom/template\"\nimport { validateWcagLabelFor, validateWcagRef } from \"../../../helpers/Validate/wcag\"\nimport { canValidateWcagOnRender } from \"../../../helpers/Dom/win\"\nimport { delay } from \"../../../utils/utils\"\nimport { GovForm } from \"../../../helpers/Dom/form.types\"\nimport { GovHost } from \"../../../helpers/Dom/template.types\"\nimport { govForm } from \"../../../helpers/Dom/form\"\nimport Fragment from \"../../../helpers/Fragment\"\nimport { FormCheckboxEvent } from \"./gov-form-checkbox.types\"\n\n@Component({\n\ttag: \"gov-form-checkbox\",\n\tstyleUrl: \"gov-form-checkbox.scss\",\n})\nexport class GovFormCheckbox {\n\tprivate readonly h: GovHost\n\tprivate f: GovForm\n\tprivate inputRef?: HTMLInputElement\n\n\tprivate readonly checkboxId: string\n\n\tconstructor() {\n\t\tthis.checkboxId = createID(\"GovCheckbox\")\n\n\t\tthis.h = govHost(this.host)\n\t\tthis.f = govForm(this.h)\n\t}\n\n\t@Element() host: HTMLGovFormCheckboxElement\n\t/**\n\t * Value of checkbox\n\t */\n\t@Prop() readonly value: string\n\t/**\n\t * Checkbox button state\n\t */\n\t@Prop({ reflect: true, mutable: true }) checked = false\n\t/**\n\t * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them.\n\t * When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.\n\t */\n\t@Prop() readonly required: boolean = false\n\t/**\n\t * Makes the checkbox component disabled.\n\t * This prevents users from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.\n\t */\n\t@Prop() readonly disabled: boolean = false\n\t/**\n\t * Name of the checkbox.\n\t */\n\t@Prop() readonly name: string\n\t/**\n\t * Checkboxes size.\n\t */\n\t@Prop() readonly size?: FormCheckboxSizesType = \"m\"\n\t/**\n\t * Custom checkbox identifier.\n\t */\n\t@Prop({ attribute: \"identifier\" }) readonly identifier: string\n\t/**\n\t * When you can't use the form label.\n\t */\n\t@Prop({ attribute: \"no-label\" }) readonly noLabel: boolean = false\n\t/**\n\t * Indicates the entered value does not conform to the format expected by the application.\n\t */\n\t@Prop() readonly invalid: boolean\n\t/**\n\t * Indicates the id of a component that describes the input.\n\t */\n\t@Prop({ attribute: \"wcag-described-by\" }) readonly wcagDescribedBy: string\n\t/**\n\t * Indicates the id of a component that labels the input.\n\t */\n\t@Prop({ attribute: \"wcag-labelled-by\" }) readonly wcagLabelledBy: string\n\t/**\n\t * Emitted when the checkbox has focus.\n\t */\n\t@Event({ eventName: \"gov-focus\" }) govFocus: EventEmitter<FormCheckboxEvent>\n\t/**\n\t * Emitted when the checkbox loses focus.\n\t */\n\t@Event({ eventName: \"gov-blur\" }) govBlur: EventEmitter<FormCheckboxEvent>\n\t/**\n\t * Emitted when the checkbox change value.\n\t */\n\t@Event({ eventName: \"gov-change\" }) govChange: EventEmitter<FormCheckboxEvent>\n\n\t@Watch(\"size\")\n\tvalidateSize(newValue: string): void {\n\t\tvalidateProp(FormCheckboxSizes, newValue, FormCheckboxClass.root)\n\t}\n\n\t@Watch(\"disabled\")\n\t@Watch(\"invalid\")\n\t@Watch(\"size\")\n\twatchDisabled(): void {\n\t\tthis.passControlAttrs()\n\t}\n\n\tprivate passControlAttrs() {\n\t\tthis.f.passAttrToControl(\"size\", this.size)\n\t\tthis.f.passAttrToControl(\"invalid\", toBoolAttr(this.invalid))\n\t}\n\n\tcomponentWillLoad() {\n\t\tthis.f.passAttrToControl(\"type\", \"checkbox\")\n\t\tthis.passControlAttrs()\n\t}\n\n\tasync componentDidRender() {\n\t\tthis.f.passAttrToLabel(\"identifier\", this.identifier || this.checkboxId)\n\t\tthis.f.passAttrToLabel(\"required\", String(this.required))\n\t\tif (canValidateWcagOnRender()) {\n\t\t\tawait delay(500)\n\t\t\tawait this.validateWcag()\n\t\t}\n\t}\n\n\trender() {\n\t\tconst wrapCheckbox = (children) => {\n\t\t\tif (this.noLabel) {\n\t\t\t\treturn (\n\t\t\t\t\t<label class={FormCheckboxClass.label}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</label>\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn children\n\t\t}\n\n\t\treturn (\n\t\t\t<Host class={FormCheckboxClass.root} checked={this.checked} size={this.size} invalid={toBoolAttrIfDefined(this.invalid)}>\n\t\t\t\t{wrapCheckbox(\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid={this.identifier || this.checkboxId}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tvalue={this.value}\n\t\t\t\t\t\t\tname={this.name}\n\t\t\t\t\t\t\tchecked={this.checked}\n\t\t\t\t\t\t\tonClick={this.onClickHandler.bind(this)}\n\t\t\t\t\t\t\tonChange={this.onChangeHandler.bind(this)}\n\t\t\t\t\t\t\tonFocus={this.onFocusHandler.bind(this)}\n\t\t\t\t\t\t\tonBlur={this.onBlurHandler.bind(this)}\n\t\t\t\t\t\t\trequired={this.required}\n\t\t\t\t\t\t\tdisabled={this.disabled}\n\t\t\t\t\t\t\tref={el => (this.inputRef = el as HTMLInputElement)}\n\t\t\t\t\t\t\taria-checked={toBoolAttr(this.checked)}\n\t\t\t\t\t\t\taria-required={toBoolAttrIfDefined(this.required)}\n\t\t\t\t\t\t\taria-invalid={toBoolAttrIfDefined(this.invalid)}\n\t\t\t\t\t\t\taria-describedby={this.wcagDescribedBy}\n\t\t\t\t\t\t\taria-labelledby={this.wcagLabelledBy}\n\t\t\t\t\t\t\taria-disabled={toBoolAttrIfDefined(this.disabled)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<slot name=\"label\" />\n\t\t\t\t\t\t\t<gov-icon class={FormCheckboxClass.check} name=\"check-lg\"></gov-icon>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Fragment>,\n\t\t\t\t)}\n\t\t\t</Host>\n\t\t)\n\t}\n\n\tprivate onFocusHandler(e: FocusEvent) {\n\t\te.stopPropagation()\n\t\tthis.govFocus.emit({\n\t\t\tcomponent: FormCheckboxClass.root,\n\t\t\tvalue: this.value,\n\t\t\tchecked: this.checked,\n\t\t\toriginalEvent: e,\n\t\t})\n\t}\n\n\tprivate onBlurHandler(e: FocusEvent) {\n\t\te.stopPropagation()\n\t\tthis.govBlur.emit({\n\t\t\tcomponent: FormCheckboxClass.root,\n\t\t\tvalue: this.value,\n\t\t\tchecked: this.checked,\n\t\t\toriginalEvent: e,\n\t\t})\n\t}\n\n\tprivate onClickHandler(e: PointerEvent) {\n\t\te.stopPropagation()\n\t}\n\n\tprivate onChangeHandler(e: Event) {\n\t\tthis.checked = (e.target as HTMLInputElement).checked\n\t\te.stopPropagation()\n\t\tthis.govChange.emit({\n\t\t\tcomponent: FormCheckboxClass.root,\n\t\t\tvalue: this.value,\n\t\t\tchecked: this.checked,\n\t\t\toriginalEvent: e,\n\t\t})\n\t}\n\n\t/**\n\t * Returns the reference of the native element\n\t */\n\t@Method()\n\tasync getRef(): Promise<HTMLInputElement> {\n\t\treturn this.inputRef\n\t}\n\n\t/**\n\t * Validate the WCAG attributes of the component\n\t */\n\t@Method()\n\tasync validateWcag(): Promise<void> {\n\t\tvalidateWcagRef(this.wcagDescribedBy, \"wcag-described-by\", FormCheckboxClass.root)\n\t\tvalidateWcagRef(this.wcagLabelledBy, \"wcag-labelled-by\", FormCheckboxClass.root)\n\t\tvalidateWcagLabelFor(this.identifier || this.checkboxId, this.wcagLabelledBy, FormCheckboxClass.root)\n\t}\n}\n"],"mappings":"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"}