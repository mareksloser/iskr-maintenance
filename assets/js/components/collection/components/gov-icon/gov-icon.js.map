{"version":3,"file":"gov-icon.js","sourceRoot":"","sources":["../../../../../../src/components/gov-icon/gov-icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Build, Component, Element, h, Host, Prop, State, Watch} from \"@stencil/core\"\nimport {IconClass} from \"./constants\"\nimport {fetchIcon} from \"../../utils/icon.utils\"\nimport {govHost} from \"../../helpers/Dom/template\"\nimport {GovHost} from \"../../helpers/Dom/template.types\"\nimport {iconsLazyLoad} from \"../../helpers/Dom/win\"\n\n@Component({\n  assetsDirs: [\"assets\"],\n  styleUrl: \"gov-icon.scss\",\n  tag: \"gov-icon\",\n})\nexport class GovIcon {\n  private h: GovHost\n\n  constructor() {\n    this.h = govHost(this.host)\n  }\n\n  @Element() host: HTMLGovIconElement\n  /**\n   * Name of icon\n   */\n  @Prop() name: string = null\n  /**\n   * Type (folder) of icon\n   */\n  @Prop() type: string = \"basic\"\n  @State() private iconData: string\n  @State() private visible = false\n  @State() private error = false\n  private intersectionObserver: IntersectionObserver\n\n  @Watch(\"name\")\n  private async loadIconPathData(): Promise<void> {\n    const {name, visible, type} = this\n    if (!Build.isBrowser || !name || !visible) {\n      return\n    }\n    try {\n      this.iconData = await fetchIcon({name, type})\n    } catch (e) {\n      this.error = true\n    }\n  }\n\n  connectedCallback(): void {\n    if (iconsLazyLoad()) {\n      this.visible = true\n      this.loadIconPathData().finally()\n    } else {\n      this.waitUntilVisible(async () => {\n        this.visible = true\n        await this.loadIconPathData()\n      })\n    }\n  }\n\n  disconnectedCallback(): void {\n    if (this.intersectionObserver) {\n      this.intersectionObserver.disconnect()\n      this.intersectionObserver = null\n    }\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await this.loadIconPathData()\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    if (!Build.isBrowser || typeof window === \"undefined\" || !(window as any).IntersectionObserver) {\n      callback()\n      return\n    }\n    this.intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (this.intersectionObserver) {\n              this.intersectionObserver.disconnect()\n              this.intersectionObserver = null\n            }\n            callback()\n          }\n        })\n      },\n      {rootMargin: \"50px\"},\n    )\n    this.intersectionObserver.observe(this.host)\n  }\n\n  render() {\n    if (this.error) {\n      return null\n    }\n    return (\n      <Host class={this.h.classes(IconClass.root)}>\n        <span class={IconClass.holder} innerHTML={this.iconData}></span>\n      </Host>\n    )\n  }\n}\n"]}