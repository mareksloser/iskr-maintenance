{"file":"gov-tag.entry.cjs.js","mappings":";;;;;;;;;;;;;;;AAAO,MAAM,QAAQ,GAAG;EACvB,IAAI,EAAE,SAAS;CACf;;ACFD,MAAM,SAAS,GAAG,o3xEAAo3xE;;MCYz3xE,MAAM;EAGlB;;mBASoC,KAAK;;;gBAYeA,qBAAW,CAAC,EAAE;mBAITC,wBAAc,CAAC,OAAO;IAxBlF,IAAI,CAAC,CAAC,GAAGC,gBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;GAC3B;EA0BD,eAAe,CAAC,QAAgB;IAC/BC,kBAAY,CAACF,wBAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;GACrD;EAGD,YAAY,CAAC,QAAgB;IAC5BE,kBAAY,CAACH,qBAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;GAClD;EAED,iBAAiB;IAChB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;GAC5B;EAED,MAAM;IACL,MAAM,QAAQ,GAAGI,yBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACjD,MAAM,SAAS,GAAGA,yBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACnD,QACCC,QAACC,UAAI,IAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EACvC,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAE,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,OAAO,EACxC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,IACxCD,kBAAM,KAAK,EAAC,SAAS,IACnB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAIA,kBAAM,IAAI,EAAC,WAAW,GAAQ,EAC7D,QAAQ,IAAKA,sBAAU,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAa,EAC7EA,qBAAO,EACN,SAAS,IAAKA,sBAAU,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,GAAa,EAC/E,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAIA,kBAAM,IAAI,EAAC,YAAY,GAAQ,CAC1D,CACD,EACP;GACD;;;;;;;;;;;","names":["ButtonSizes","ButtonVariants","govHost","validateProp","prepareIconFormat","h","Host"],"sources":["../../../packages/core/src/components/gov-tag/constants.ts","../../../packages/core/src/components/gov-tag/gov-tag.scss?tag=gov-tag","../../../packages/core/src/components/gov-tag/gov-tag.tsx"],"sourcesContent":["export const TagClass = {\n\troot: 'gov-tag',\n}\n","/*\n *   Tag\n */\n\n// Shared definitions - button & chip & tag\n@import \"../gov-button/button/gov-button-core\";\n\n.gov-tag {\n\t@extend %button-core;\n\n\t// VARIANTS\n\t@each $variant, $types in $tag-variants {\n\t\t@each $type, $definitions in $types {\n\t\t\t&[type=\"#{$type}\"][variant=\"#{$variant}\"] {\n\t\t\t\t.element {\n\t\t\t\t\tbackground-color: deep-map-get($tag-variants, $variant, $type, \"bg\");\n\t\t\t\t\tcolor: deep-map-get($tag-variants, $variant, $type, \"color\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@each $size, $definitions in $button-sizes {\n\t\t&[size=\"#{$size}\"] {\n\t\t\t.element {\n\t\t\t\tborder-radius: $tag-radius;\n\t\t\t\tcolumn-gap: $tag-gap;\n\t\t\t}\n\t\t}\n\t}\n\t@each $variant, $types in $chip-inverse-variants {\n\t\t&[variant=\"#{$variant}\"] {\n\t\t\t@include parameter(\"inverse\") {\n\t\t\t\t.element,\n\t\t\t\t.element .element {\n\t\t\t\t\tborder-width: rem-calc(1);\n\t\t\t\t\tborder-color: deep-map-get($chip-inverse-variants, $variant, \"border-color\");\n\t\t\t\t\tbackground-color: deep-map-get($chip-inverse-variants, $variant, \"bg\");\n\t\t\t\t\tcolor: deep-map-get($chip-inverse-variants, $variant, \"color\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {Component, Element, h, Host, Prop, Watch} from '@stencil/core'\nimport {govHost} from '../../helpers/Dom/template'\nimport {GovHost} from '../../helpers/Dom/template.types'\nimport {validateProp} from '../../helpers/Validate/props'\nimport {ButtonSizes, ButtonSizesType, ButtonVariants, ButtonVariantType} from '../gov-button/button/constants'\nimport {TagClass} from './constants'\nimport {prepareIconFormat} from \"../gov-icon/helpers\";\n\n@Component({\n\ttag: 'gov-tag',\n\tstyleUrl: 'gov-tag.scss',\n})\nexport class GovTag {\n\tprivate h: GovHost\n\n\tconstructor() {\n\t\tthis.h = govHost(this.host)\n\t}\n\n\t@Element() host: HTMLGovTagElement\n\n\t/**\n\t * Determine if component should have inverse colors to be used on dark background\n\t */\n\t@Prop() readonly inverse: boolean = false\n\t/**\n\t * Definition of the button icon on the left. The icon must be defined in the form \"type/name\".\n\t */\n\t@Prop({attribute: \"icon-left\"}) readonly iconLeft?: string\n\t/**\n\t * Definition of the button icon on the left. The icon must be defined in the form \"type/name\".\n\t */\n\t@Prop({attribute: \"icon-right\"}) readonly iconRight?: string\n\t/**\n\t * Tagâ€™s size.\n\t */\n\t@Prop({reflect: true}) readonly size: ButtonSizesType = ButtonSizes._S\n\t/**\n\t * Style variation of the tag.\n\t */\n\t@Prop({reflect: true}) readonly variant: ButtonVariantType = ButtonVariants.PRIMARY\n\n\t@Watch('variant')\n\tvalidateVariant(newValue: string): void {\n\t\tvalidateProp(ButtonVariants, newValue, TagClass.root)\n\t}\n\n\t@Watch('size')\n\tvalidateSize(newValue: string): void {\n\t\tvalidateProp(ButtonSizes, newValue, TagClass.root)\n\t}\n\n\tcomponentWillLoad(): void {\n\t\tthis.validateVariant(this.variant)\n\t\tthis.validateSize(this.size)\n\t}\n\n\trender() {\n\t\tconst iconLeft = prepareIconFormat(this.iconLeft)\n\t\tconst iconRight = prepareIconFormat(this.iconRight)\n\t\treturn (\n\t\t\t<Host class={this.h.classes(TagClass.root)}\n\t\t\t\t\t\tvariant={this.variant}\n\t\t\t\t\t\ttype={this.inverse ? undefined : 'solid'}\n\t\t\t\t\t\tsize={this.size} inverse={this.inverse}>\n\t\t\t\t<span class=\"element\">\n\t\t\t\t\t{this.h.hasSlot('left-icon') && <slot name=\"left-icon\"></slot>}\n\t\t\t\t\t{iconLeft && \t<gov-icon type={iconLeft.type} name={iconLeft.name}></gov-icon>}\n\t\t\t\t\t<slot/>\n\t\t\t\t\t{iconRight && \t<gov-icon type={iconRight.type} name={iconRight.name}></gov-icon>}\n\t\t\t\t\t{this.h.hasSlot('right-icon') && <slot name=\"right-icon\"></slot>}\n\t\t\t\t</span>\n\t\t\t</Host>\n\t\t)\n\t}\n}\n"],"version":3}